"""Altgirls plugin for Pyrogram: requests backend API and sends album with funny captions."""

import base64
import io
import random

from pyrogram import Client, filters
from pyrogram.enums import ChatType
from pyrogram.types import ChatMember, InputMediaPhoto, Message
from structlog import get_logger
from utils.api_client import backend_client
from utils.decorators import nsfw_guard, rate_limit

log = get_logger(__name__)

NO_IMAGES_FOUND = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
GENERAL_ERROR = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

RELATIONSHIP_TERMS = [
    "–∂–µ–Ω–∞",
    "–¥–µ–≤—É—à–∫–∞",
    "–ª—é–±–æ–≤–Ω–∏—Ü–∞",
    "–ø–∏—Ç–æ–º–µ—Ü",
    "—Å–µ—Å—Ç—Ä–∞",
    "–º–∞–º–∞",
    "—Ç—ë—â–∞",
    "–µ–±–Ω—ë—Ç –∫–∞–º–Ω–µ–º",
    "–∏–∑–æ–±—å—ë—Ç",
    "–Ω–∞—Å—Ç—É–ø–∏—Ç –Ω–∞ —è–π—Ü–∞",
    "–æ—Ç–æ—Ä–≤—ë—Ç —è–π—Ü–∞",
    "–ø–æ–∫–∞–∂–µ—Ç –Ω–æ–∂–∫–∏",
    "–∑–∞–¥—É—à–∏—Ç",
    "—É–±—å–µ—Ç",
    "—Ñ–µ–º–≤–µ—Ä—Å–∏—è",
    "—Ç—Ä–∞–ø–∏–∫",
    "–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç —Ö–∞—á–∞–ø—É—Ä–∏",
    "—Å–æ—Ö–Ω–µ—Ç –ø–æ",
    "–∏–∑–º–µ–Ω–∏—Ç",
    "–¥–∞—Å—Ç –Ω–∏–∫–µ–ª–µ–≤—É—é –∫–∞–º—É—à–∫—É",
    "–ø–æ—Å–ª—É—à–∞–µ—Ç –º—É–∑—ã–∫—É",
    "–Ω–µ–Ω–∞–≤–∏–¥–∏—Ç",
    "–ª—é–±–∏—Ç",
    "–±—É–¥–µ—Ç –ø–æ–¥—Ä–∞–∑–Ω–∏–≤–∞—Ç—å",
    "–ø–æ–º—É—Ä–ª—ã—á–∏—Ç –≤ –¥–∏—Å–∫–æ—Ä–¥–∏–∫–µ",
    "–ø–æ–¥–∞—Ä–∏—Ç —Ü–≤–µ—Ç—ã",
    "–Ω–∞–∫–æ—Ä–º–∏—Ç –±–æ—Ä—â–æ–º",
    "–∑–∞—Å—Ç–∞–≤–∏—Ç –º—ã—Ç—å –ø–æ—Å—É–¥—É",
    "–ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç —Å –º–∞–º–æ–π",
    "–Ω–∞–ø–∏—à–µ—Ç —Å—Ç–∏—Ö–∏",
    "–æ—Ç–≤–µ–¥–µ—Ç –≤ –∫–∏–Ω–æ",
    "—Å–¥–µ–ª–∞–µ—Ç –º–∞—Å—Å–∞–∂",
    "–∏—Å–ø–µ—á–µ—Ç –ø–∏—Ä–æ–∂–∫–∏",
    "–ø–æ–≥–ª–∞–¥–∏—Ç –ø–æ –≥–æ–ª–æ–≤–µ",
    "—Å–ø–æ–µ—Ç –∫–æ–ª—ã–±–µ–ª—å–Ω—É—é",
    "–Ω–∞—É—á–∏—Ç –≥–æ—Ç–æ–≤–∏—Ç—å",
    "–±—É–¥–µ—Ç —Ä–µ–≤–Ω–æ–≤–∞—Ç—å",
    "–ø–æ—Å—Ç–∏—Ä–∞–µ—Ç –Ω–æ—Å–∫–∏",
    "–∑–∞—Å—Ç–∞–≤–∏—Ç –Ω–æ—Å–∏—Ç—å –ø–ª–∞—Ç—å–µ",
    "–Ω–∞–∫—Ä–∞—Å–∏—Ç –≥—É–±—ã",
    "—Å–¥–µ–ª–∞–µ—Ç –ø—Ä–∏—á–µ—Å–∫—É",
    "–Ω–∞—É—á–∏—Ç —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å",
    "–≤–æ–∑—å–º–µ—Ç –Ω–∞ —à–æ–ø–∏–Ω–≥",
    "–±—É–¥–µ—Ç –ø–∏–ª–∏—Ç—å",
]

ACCUSATIVE_VERBS = [
    "–∂–µ–Ω–∞",
    "–¥–µ–≤—É—à–∫–∞",
    "–ª—é–±–æ–≤–Ω–∏—Ü–∞",
    "–ø–∏—Ç–æ–º–µ—Ü",
    "—Å–µ—Å—Ç—Ä–∞",
    "–º–∞–º–∞",
    "—Ç—ë—â–∞",
    "–µ–±–Ω—ë—Ç –∫–∞–º–Ω–µ–º",
    "—Ä–∞–∑–æ—Ä–≤—ë—Ç",
    "–Ω–∞—Å–∞–¥–∏—Ç –Ω–∞ –∫–æ–ª",
    "–∑–∞—Ä–µ–∂–µ—Ç",
    "–∑–∞—Å—Ç–∞–ª–∫–µ—Ä–∏—Ç",
    "–∂–µ–Ω—Å–∫–∞—è –≤–µ—Ä—Å–∏—è",
    "–≤—ã–µ–±–µ—Ç",
    "–∑–∞–¥—É—à–∏—Ç",
    "—É–±—å–µ—Ç",
    "–∏–∑–æ–±—å—ë—Ç",
    "–æ—Ç–æ—Ä–≤—ë—Ç —è–π—Ü–∞",
    "–±—É–¥–µ—Ç –ø–æ–¥—Ä–∞–∑–Ω–∏–≤–∞—Ç—å",
    "—Ç—Ä–∞–ø–∏–∫",
    "–Ω–µ–Ω–∞–≤–∏–¥–∏—Ç",
    "–ø–æ—Å–ª—É—à–∞–µ—Ç –º—É–∑—ã–∫—É",
    "–ª—é–±–∏—Ç",
    "–∏–∑–Ω–∏—á—Ç–æ–∂–∏—Ç –ø–µ–Ω–∏—Å",
    "–∑–∞–∫—É–∫–æ–ª–¥–∏—Ç",
    "–ø–æ—Å–∞–¥–∏—Ç –≤ —Ç—é—Ä—å–º—É",
    "—É–±–∞—é–∫–∞–µ—Ç –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "—Ñ–µ–º–≤–µ—Ä—Å–∏—è",
    "–≤–æ–∑—å–º–µ—Ç –∑–∞–º—É–∂",
    "—Å–¥–µ–ª–∞–µ—Ç —Ñ–µ–º–∏–Ω–∏—Å—Ç–æ–º",
    "–∑–∞—Å—Ç–∞–≤–∏—Ç –≥–æ—Ç–æ–≤–∏—Ç—å",
    "–æ—Ç–ø—Ä–∞–≤–∏—Ç –º—ã—Ç—å –ø–æ—Å—É–¥—É",
    "–Ω–∞–∫—Ä–∞—Å–∏—Ç –≥—É–±—ã",
    "–æ–¥–µ–Ω–µ—Ç –≤ –ø–ª–∞—Ç—å–µ",
    "–Ω–∞—É—á–∏—Ç –≤—ã—à–∏–≤–∞—Ç—å",
    "–æ—Ç–≤–µ–¥–µ—Ç –∫ –º–∞–º–µ",
    "–∑–∞—Å—Ç–∞–≤–∏—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–ª–æ–¥—Ä–∞–º—ã",
    "–±—É–¥–µ—Ç –ø–∏–ª–∏—Ç—å",
    "–∑–∞—Å—Ç–∞–≤–∏—Ç —Ö–æ–¥–∏—Ç—å –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
    "–Ω–∞—É—á–∏—Ç –≥–ª–∞–¥–∏—Ç—å",
    "–∑–∞—Å—Ç–∞–≤–∏—Ç —É–±–∏—Ä–∞—Ç—å—Å—è",
    "–Ω–∞—É—á–∏—Ç —Å—Ç–∏—Ä–∞—Ç—å",
    "—Å–¥–µ–ª–∞–µ—Ç –¥–æ–º–æ—Ö–æ–∑—è–π–∫–æ–π",
    "–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –≤ –ø–æ–¥–∫–∞–±–ª—É—á–Ω–∏–∫–∞",
    "—É–∫—Ä–∞–¥–µ—Ç –Ω–æ—Å–∫–∏",
    "—Å–ø—Ä—è—á–µ—Ç –ø—Ä–∞–≤–∞",
    "–∑–∞–±–µ—Ä–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É",
    "–∑–∞—Å—Ç–∞–≤–∏—Ç —Å–ø–∞—Ç—å –Ω–∞ –¥–∏–≤–∞–Ω–µ",
    "–≤–æ–∑—å–º–µ—Ç –≤ –ó–ê–ì–°",
]


async def get_chat_members(client: Client, chat_id: int) -> list[ChatMember]:
    """Get list of chat members excluding bots."""
    try:
        return [
            member
            async for member in client.get_chat_members(chat_id)
            if not member.user.is_bot
        ]
    except Exception:
        return []


def format_source_link(source_link: str) -> str:
    """Formats the source link into a clickable markdown link."""

    if "://" in source_link:
        if "vk.com/" in source_link:
            username = source_link.split("vk.com/")[1].split("/")[0]
            if username:
                return f"[{username}]({source_link})"
        elif "t.me/" in source_link:
            username = source_link.split("t.me/")[1].split("/")[0]
            if username:
                return f"[{username}]({source_link})"
        return source_link

    if "_" not in source_link:
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–∏—Å—Ç–æ—á–Ω–∏–∫: {source_link})"

    platform, username = source_link.split("_", 1)

    if platform == "tg":
        return f"[{username}](https://t.me/{username})"
    elif platform == "vk":
        return f"[{username}](https://vk.com/{username})"
    else:
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–∏—Å—Ç–æ—á–Ω–∏–∫: {source_link})"


@Client.on_message(filters.command(["altgirls"]), group=1)
@rate_limit(
    config_key_prefix="fun/altgirls.rate_limit",
    default_seconds=3,
    default_limit=1,
    key="user",
    silent=False,
)
@nsfw_guard
async def handle_altgirls(client: Client, message: Message):
    """Handle /altgirls command: fetch images from backend and send with funny caption."""
    try:
        count = 4

        notification = await message.reply_text(
            "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–ª—å—Ç—É—à–µ–∫...", quote=True
        )

        result = await backend_client.get(
            "/fun/altgirls",
            message=message,
            params={"n": count},
        )

        images = result.get("images", [])
        if not images:
            await notification.delete()
            await message.reply_text(NO_IMAGES_FOUND, quote=True)
            return

        is_private = message.chat.type == ChatType.PRIVATE
        if not is_private:
            combined_caption = f"–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {len(images)}\n\n"
            members = await get_chat_members(client, message.chat.id)
            for i, img in enumerate(images, 1):
                source_raw = img.get("source_link", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                source = format_source_link(source_raw)

                if members:
                    m = random.choice(members)
                    term = random.choice(RELATIONSHIP_TERMS)
                    verb_suffix = (
                        "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        if any(v in term for v in ACCUSATIVE_VERBS)
                        else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                    )
                    user_name = m.user.first_name or m.user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    combined_caption += f"–ü–∏–∫—á–∞ ‚Ññ{i} - {term} {verb_suffix} {user_name} | –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
                else:
                    combined_caption += f"–ü–∏–∫—á–∞ ‚Ññ{i} | –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
        else:
            combined_caption = f"–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {len(images)}\n\n"
            for i, img in enumerate(images, 1):
                source_raw = img.get("source_link", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                source = format_source_link(source_raw)
                combined_caption += f"–ü–∏–∫—á–∞ ‚Ññ{i} | –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"

        media_group = []
        for idx, img in enumerate(images):
            try:
                raw = base64.b64decode(img["base64_data"])
                bio = io.BytesIO(raw)

                bio.name = img.get("filename") or f"image_{idx + 1}.jpg"
                if idx == 0:
                    media_group.append(
                        InputMediaPhoto(media=bio, caption=combined_caption)
                    )
                else:
                    media_group.append(InputMediaPhoto(media=bio))
            except Exception as e:
                log.error(f"Failed to prepare image {idx + 1}: {e}")

        if not media_group:
            await notification.delete()
            await message.reply_text(GENERAL_ERROR, quote=True)
            return

        await message.reply_media_group(media=media_group, quote=True)
        await notification.delete()

    except Exception as e:
        log.error(f"Error in /altgirls command: {e}")
        try:
            await message.reply_text(GENERAL_ERROR, quote=True)
        except Exception:
            pass

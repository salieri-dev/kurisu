name: CI Quality Checks

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  lint-and-format:
    name: Lint & Format (${{ matrix.service }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ backend, bot, worker ] # kurisu_core is checked via others

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: pipx install poetry

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        with:
          path: ./${{ matrix.service }}/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles(format('{0}/poetry.lock', matrix.service)) }}

      # Check for file changes to avoid unnecessary runs (optional but efficient)
      - name: Check for relevant file changes
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            ${{ matrix.service }}/**
            kurisu_core/**

      - name: Install Dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: ./${{ matrix.service }}
        # FIX: Removed --without dev to install ruff
        run: poetry install --no-interaction

      - name: Run Ruff Linter
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: ./${{ matrix.service }}
        run: poetry run ruff check .

  type-check-and-test:
    name: Type Check & Test
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: pipx install poetry

      - name: Install ALL project dependencies
        run: |
          poetry -C backend install
          poetry -C bot install
          poetry -C worker install

      - name: Install Root Dev Dependencies
        # Create a dummy pyproject.toml if one doesn't exist to satisfy poetry
        run: |
          if [ ! -f pyproject.toml ]; then
            poetry init --no-interaction -n kurisu-monorepo -d "Monorepo root"
          fi
          poetry add "mypy>=1.10" "pydantic-mypy" --group dev

      - name: Run MyPy Type Checker from Root
        # This now uses the root pyproject.toml for configuration
        run: poetry run mypy .

      - name: Run Backend Tests
        working-directory: ./backend
        run: poetry run pytest
name: Semantic Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      core-changed: ${{ steps.changes.outputs.core }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      bot-changed: ${{ steps.changes.outputs.bot }}
      worker-changed: ${{ steps.changes.outputs.worker }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            core:
              - 'kurisu_core/**'
            backend:
              - 'backend/**'
              - 'kurisu_core/**'
            bot:
              - 'bot/**'
              - 'kurisu_core/**'
            worker:
              - 'worker/**'
              - 'kurisu_core/**'

  release-core:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.core-changed == 'true'
    concurrency:
      group: ${{ github.workflow }}-release-core-${{ github.ref_name }}
      cancel-in-progress: false
    permissions:
      contents: write
      id-token: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Verify upstream has NOT changed
        shell: bash
        run: |
          set +o pipefail
          
          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"
          
          set -o pipefail
          
          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
            printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
            exit 1
          fi
          
          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"
          
          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
            printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
            exit 1
          fi
          
          HEAD_SHA="$(git rev-parse HEAD)"
          
          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
            printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
            printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
            exit 1
          fi
          
          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.3.1
        with:
          directory: kurisu_core
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"

  release-bot:
    runs-on: ubuntu-latest
    needs: [detect-changes, release-core]
    if: needs.detect-changes.outputs.bot-changed == 'true' && !failure()
    concurrency:
      group: ${{ github.workflow }}-release-bot-${{ github.ref_name }}
      cancel-in-progress: false
    permissions:
      contents: write
      id-token: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Verify upstream has NOT changed
        shell: bash
        run: |
          set +o pipefail
          
          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"
          
          set -o pipefail
          
          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
            printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
            exit 1
          fi
          
          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"
          
          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
            printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
            exit 1
          fi
          
          HEAD_SHA="$(git rev-parse HEAD)"
          
          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
            printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
            printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
            exit 1
          fi
          
          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.3.1
        with:
          directory: bot
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"

  release-backend:
    runs-on: ubuntu-latest
    needs: [detect-changes, release-core]
    if: needs.detect-changes.outputs.backend-changed == 'true' && !failure()
    concurrency:
      group: ${{ github.workflow }}-release-backend-${{ github.ref_name }}
      cancel-in-progress: false
    permissions:
      contents: write
      id-token: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Verify upstream has NOT changed
        shell: bash
        run: |
          set +o pipefail
          
          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"
          
          set -o pipefail
          
          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
            printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
            exit 1
          fi
          
          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"
          
          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
            printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
            exit 1
          fi
          
          HEAD_SHA="$(git rev-parse HEAD)"
          
          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
            printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
            printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
            exit 1
          fi
          
          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.3.1
        with:
          directory: backend
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"

  release-worker:
    runs-on: ubuntu-latest
    needs: [detect-changes, release-core]
    if: needs.detect-changes.outputs.worker-changed == 'true' && !failure()
    concurrency:
      group: ${{ github.workflow }}-release-worker-${{ github.ref_name }}
      cancel-in-progress: false
    permissions:
      contents: write
      id-token: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Verify upstream has NOT changed
        shell: bash
        run: |
          set +o pipefail
          
          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"
          
          set -o pipefail
          
          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
            printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
            exit 1
          fi
          
          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"
          
          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
            printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
            exit 1
          fi
          
          HEAD_SHA="$(git rev-parse HEAD)"
          
          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
            printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
            printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
            exit 1
          fi
          
          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.3.1
        with:
          directory: worker
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
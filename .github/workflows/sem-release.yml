name: Python Semantic Release

# This workflow runs on every push to the 'main' branch
on:
  push:
    branches:
      - main

# Set default permissions for the GITHUB_TOKEN for security
permissions:
  contents: read

jobs:
  release:
    name: Create Release for Backend Service
    runs-on: ubuntu-latest
    
    # This ensures that if you push multiple commits quickly, only one release job runs at a time.
    concurrency:
      group: ${{ github.workflow }}-release-backend-${{ github.ref }}
      cancel-in-progress: true

    # Grant write permissions to the GITHUB_TOKEN for this specific job
    # This is required to push commits/tags and create a GitHub release.
    permissions:
      contents: write # To push commits and tags
      issues: write   # To comment on issues/PRs
      pull-requests: write # To comment on issues/PRs

    steps:
      # Step 1: Check out the full repository history
      # fetch-depth: 0 is CRITICAL for semantic-release to analyze commits.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Step 2: Set up Python
      # We need Python to install Poetry.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Step 3: Install Poetry
      # Caching is used to speed up subsequent runs.
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Step 4: Run the Semantic Release Action
      # This is the core of the workflow.
      - name: Create Release
        id: release_backend
        uses: python-semantic-release/python-semantic-release@v10.3.1
        with:
          # Tell the action that our backend project is in the 'backend/' subdirectory
          directory: backend
          # The GITHUB_TOKEN is automatically provided by GitHub Actions
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: (Optional but recommended) Build and upload artifacts
      # This step only runs if a new version was actually created.
      - name: Build Python Package
        if: steps.release_backend.outputs.released == 'true'
        run: |
          cd backend
          poetry install --no-dev
          poetry build

      # Step 6: (Optional) Upload artifacts to the GitHub Release
      # This attaches the .whl and .tar.gz files to the release page.
      - name: Publish to GitHub Release
        if: steps.release_backend.outputs.released == 'true'
        uses: python-semantic-release/publish-action@v10.3.1
        with:
          directory: backend
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release_backend.outputs.tag }}
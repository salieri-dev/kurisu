[tool.poetry]
name = "kurisu-backend"
version = "1.0.0"
description = "The backend service for the Kurisu project."
authors = ["Your Name <you@example.com>"]
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.116.1"
pydantic = "^2.11.7"
pydantic-settings = "^2.10.1"
uvicorn = { extras = ["standard"], version = "^0.35.0" }
matplotlib = "^3.10.6"
pillow = "^11.3.0"
opencv-python-headless = "^4.12.0"
wand = "^0.6.13"
python-magic = "^0.4.27"
pyfiglet = "^1.0.4"
motor = "^3.7.1"
pymongo = "^4.14.1"
redis = "^6.4.0"
celery = "^5.5.3"
structlog = "^25.4.0"
httpx = { extras = ["socks"], version = "^0.28.1" }
openai = "^1.102.0"
fal-client = "^0.7.0"
imgkit = "^1.2.3"
jinja2 = "^3.1.6"
pytz = "^2025.2"
kurisu-core = { path = "../kurisu_core", develop = true }
prometheus-fastapi-instrumentator = "^7.1.0"
opentelemetry-api = "^1.36.0"
opentelemetry-sdk = "^1.36.0"
opentelemetry-instrumentation-fastapi = "^0.57b0"
opentelemetry-exporter-otlp-proto-grpc = "^1.36.0"
opentelemetry-instrumentation-httpx = "^0.57b0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-asyncio = "^1.1.0"
pytest-dotenv = "^0.5.2"
ruff = "^0.12.11"
mypy = "^1.17.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["../tests/backend"]
pythonpath = ["."]
asyncio_mode = "auto"
env_files = ["../.env.test"]

# ====================================
# Python Semantic Release Configuration
# ====================================
[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = ["__init__.py:__version__"]
build_command = ""  # No build needed for applications
dist_path = "dist/"
upload_to_pypi = false
upload_to_repository = false
remove_dist = false
commit_message = "chore(backend): release v{version}"
tag_format = "backend-v{version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^chore\\(release\\):",
    "^chore\\(deps\\):",
    "^build\\(deps\\):",
]

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore", 
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test"
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump = false
# Support for emoji-prefixed commits
pattern = "^.*?(?P<type>feat|fix|docs|style|refactor|perf|test|build|ci|chore)(?:\\((?P<scope>[^)]+)\\))?(?P<breaking>!)?:\\s*(?P<subject>.*)$"
[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "github-actions <actions@users.noreply.github.com>"

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.remote.token]
env = "GITHUB_TOKEN"
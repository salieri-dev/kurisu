services:
  backend:
    build:
      context: . 
      dockerfile: backend/Dockerfile 
    volumes:
      - ./backend:/backend
      - ./kurisu_core:/backend/kurisu_core
      - F:/assets:/backend/assets
    ports:
      - "8000:8000"
    restart: no
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - SERVICE_NAME=backend
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  bot:
    build:
      context: . 
      dockerfile: bot/Dockerfile
    volumes:
      - ./bot:/app
      - ./kurisu_core:/app/kurisu_core
    restart: no
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - SERVICE_NAME=bot
      - BACKEND_URL=http://backend:8000
      - REDIS_URL=redis://redis:6379
    depends_on:
      backend:
        condition: service_healthy

  worker:
    build:
      context: . 
      dockerfile: worker/Dockerfile 
    volumes:
      - ./worker:/app
      - ./kurisu_core:/app/kurisu_core
    restart: no
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - SERVICE_NAME=worker
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:8000
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  mongodb:
    image: mongo:latest
    restart: always
    ports:
      - "${TAILSCALE_IP}:27017:27017"
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - ./.data/mongodb:/data/db
    networks:
      - app-network
    stop_grace_period: 5s
    healthcheck:
      test: mongosh "mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@localhost:27017/admin" --quiet --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s 

  redis:
    image: redis:alpine
    restart: no
    ports:
      - "${TAILSCALE_IP}:6379:6379"
    env_file:
      - .env
    networks:
      - app-network
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - ./.data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

networks:
  app-network:
    driver: bridge

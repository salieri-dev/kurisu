services:
  backend:
    build:
      context: . 
      dockerfile: backend/Dockerfile 
    volumes:
      - ./backend:/opt/kurisu/backend
      - ./kurisu_core:/opt/kurisu/kurisu_core
      - ${ALTGIRLS_ASSETS_PATH}:/opt/kurisu/backend/plugins/fun/altgirls/assets 
      - ${THREADS_ASSETS_PATH}:/opt/kurisu/backend/plugins/neuro/threads/assets
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - SERVICE_NAME=backend
      - OTEL_SERVICE_NAME=backend
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - REDIS_URL=redis://redis:6379
      - JSON_LOGS=true
    labels:
      - "logging=promtail"
      - "service_name=backend"
    depends_on:
      - mongodb
      - otel-collector
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 1s

  bot:
    build:
      context: . 
      dockerfile: bot/Dockerfile
    volumes:
      - ./bot:/opt/kurisu/bot
      - ./kurisu_core:/opt/kurisu/kurisu_core
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - SERVICE_NAME=bot
      - OTEL_SERVICE_NAME=bot
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - BACKEND_URL=http://backend:8000
      - REDIS_URL=redis://redis:6379
      - JSON_LOGS=true
    labels:
      - "logging=promtail"
      - "service_name=bot"
    depends_on:
      backend:
        condition: service_healthy
      otel-collector:
        condition: service_started

  worker:
    build:
      context: . 
      dockerfile: worker/Dockerfile 
    volumes:
      - ./worker:/opt/kurisu/worker
      - ./kurisu_core:/opt/kurisu/kurisu_core
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - SERVICE_NAME=worker
      - OTEL_SERVICE_NAME=worker
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:8000
      - JSON_LOGS=true
    labels:
      - "logging=promtail"
      - "service_name=worker"
    depends_on:
      - backend
      - redis
      - mongodb
      - otel-collector

  mongodb:
    image: mongo:latest
    restart: always
    ports:
      - "${TAILSCALE_IP}:27017:27017"
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - ./.data/mongodb:/data/db
    networks:
      - app-network
    stop_grace_period: 5s
    healthcheck:
      test: mongosh "mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@localhost:27017/admin" --quiet --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s 

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "${TAILSCALE_IP}:6379:6379"
    env_file:
      - .env
    networks:
      - app-network
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - ./.data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
      
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./.data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-remote-write-receiver'
    ports:
      - "9090:9090"
    networks:
      - app-network
  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - app-network

  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    volumes:
      - ./monitoring/loki/config.yml:/etc/loki/config.yml
      - ./.data/loki:/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yml
    networks:
      - app-network

  promtail:
    image: grafana/promtail:latest
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail/config.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.data/promtail:/var/lib/promtail/positions
    command: -config.file=/etc/promtail/config.yml
    networks:
      - app-network
    depends_on:
      - loki

  grafana:
    image: grafana/grafana-oss:latest
    restart: unless-stopped
    volumes:
      - ./.data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - loki
      - prometheus
      - tempo

  otel-collector:
      image: otel/opentelemetry-collector-contrib:latest
      restart: unless-stopped
      command: ["--config=/etc/otelcol-contrib/config.yaml"]
      volumes:
        - ./monitoring/otel-collector/config.yml:/etc/otelcol-contrib/config.yaml
      networks:
        - app-network
      depends_on:
        loki:
          condition: service_started

  tempo:
    image: grafana/tempo:latest
    command:
      - "-config.file=/etc/tempo/config.yml"
      - "-target=all"
    restart: unless-stopped
    volumes:
      - ./monitoring/tempo/config.yml:/etc/tempo/config.yml
      - ./.data/tempo:/var/tempo
    ports:
      - "3200:3200" # Tempo UI / API
      - "4317:4317" # OTLP gRPC receiver for the collector to connect to
    networks:
      - app-network


networks:
  app-network:
    driver: bridge
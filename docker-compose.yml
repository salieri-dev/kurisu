volumes:
  hf_cache:

services:
  backend:
    build:
      context: . 
      dockerfile: services/backend/Dockerfile
    volumes:
      - ${ALTGIRLS_ASSETS_PATH:-./assets/altgirls}:/app/services/backend/plugins/fun/altgirls/assets 
      - ${THREADS_ASSETS_PATH:-./assets/threads}:/app/services/backend/plugins/neuro/threads/assets
      - ./services/backend:/app/services/backend
    ports:
      - "${TAILSCALE_IP:-127.0.0.1}:8000:8000"
    restart: unless-stopped
    networks:
      - kurisu
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      - REDIS_URL=redis://redis:6379
      - JSON_LOGS=true
      - MONGODB_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017
    labels:
      - "logging=promtail"
    depends_on:
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 1s

  bot:
    build:
      context: . 
      dockerfile: services/bot/Dockerfile
    restart: unless-stopped
    networks:
      - kurisu
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      - BACKEND_URL=http://backend:8000
      - REDIS_URL=redis://redis:6379
      - JSON_LOGS=true
    labels:
      - "logging=promtail"
    depends_on:
      backend:
        condition: service_healthy

  worker:
    build:
      context: . 
      dockerfile: services/worker/Dockerfile
    restart: unless-stopped
    networks:
      - kurisu
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:8000
      - JSON_LOGS=true
      - MONGODB_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017
    labels:
      - "logging=promtail"
    depends_on:
      - backend
      - redis
      - mongodb

  sentiment-worker:
    build:
      context: . 
      dockerfile: services/sentiment_worker/Dockerfile
      args:
        - SENTIMENT_MODEL=${SENTIMENT_MODEL}
        - SENSITIVE_TOPICS_MODEL=${SENSITIVE_TOPICS_MODEL}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - hf_cache:/opt/kurisu/cache 
    restart: unless-stopped
    networks:
      - kurisu
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      - REDIS_URL=redis://redis:6379
      - JSON_LOGS=true
      - SENTIMENT_MODEL_DEVICE=cuda
      - SENTIMENT_BATCH_SIZE=1024
      - MONGODB_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017
    labels:
      - "logging=promtail"
    depends_on:
      - redis
      - mongodb

  dashboard:
    build:
      context: .
      dockerfile: services/dashboard/Dockerfile
    ports:
      - "${TAILSCALE_IP:-127.0.0.1}:8001:8001"
    restart: unless-stopped
    networks:
      - kurisu
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      - BACKEND_URL=http://backend:8000
      - JSON_LOGS=true
    labels:
      - "logging=promtail"
    depends_on:
      - backend

  mongodb:
    image: mongo:latest
    restart: always
    ports:
      - "${TAILSCALE_IP:-127.0.0.1}:27017:27017"
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - ./.data/mongodb:/data/db
    networks:
      - kurisu
    stop_grace_period: 5s
    healthcheck:
      test: mongosh "mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@localhost:27017/admin" --quiet --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s 

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "${TAILSCALE_IP:-127.0.0.1}:6379:6379"
    env_file:
      - .env
    networks:
      - kurisu
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - ./.data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

networks:
  kurisu:
    external: true